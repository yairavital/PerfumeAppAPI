// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PerfumeAppAPI.Data;

#nullable disable

namespace PerfumeAppAPI.Migrations
{
    [DbContext(typeof(StoreDbContext))]
    [Migration("20230610184652_config33")]
    partial class config33
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c32f66ed-c960-4cb7-a468-90662e1fb37a",
                            ConcurrencyStamp = "7a03b52f-cf58-46a0-b0d2-cb9c5475a10a",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "ddc1ddb9-2495-40d6-b278-633bc6ca29c6",
                            ConcurrencyStamp = "3b75166d-a5b2-4d1b-a500-210fdfafb093",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "4a8a52b2-8c3d-45d2-9fe5-ff01895c5c29",
                            ConcurrencyStamp = "c3655448-09d7-49b4-aab6-bdea60203714",
                            Name = "Visitor",
                            NormalizedName = "VISITOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            RoleId = "c32f66ed-c960-4cb7-a468-90662e1fb37a"
                        },
                        new
                        {
                            UserId = "ddc1ddb9-2495-40d6-b278-633bc6ca29c6",
                            RoleId = "ddc1ddb9-2495-40d6-b278-633bc6ca29c6"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PerfumeAppAPI.Data.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("ImgSrc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("OnSale")
                        .HasColumnType("bit");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("ProductType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Gender = 1,
                            ImgSrc = "https://img.zap.co.il/pics/6/9/5/0/47700596c.gif",
                            Name = "chanelBlu",
                            OnSale = false,
                            Price = 245.0,
                            ProductType = 0
                        },
                        new
                        {
                            Id = 2,
                            Gender = 1,
                            ImgSrc = "https://ksp.co.il/shop/items/512/50083.jpg?V=23020508",
                            Name = "SauvageDior",
                            OnSale = false,
                            Price = 200.0,
                            ProductType = 0
                        },
                        new
                        {
                            Id = 3,
                            Gender = 1,
                            ImgSrc = "https://la-essence.com/wp-content/uploads/2021/12/Cat_491009_1064-300x300.jpg",
                            Name = "Lacost Home",
                            OnSale = false,
                            Price = 185.0,
                            ProductType = 0
                        },
                        new
                        {
                            Id = 4,
                            Gender = 1,
                            ImgSrc = "./assets/Images/PerfumesImages/Explorer.jpg",
                            Name = "Explorer",
                            OnSale = true,
                            Price = 175.0,
                            ProductType = 0
                        },
                        new
                        {
                            Id = 5,
                            Gender = 1,
                            ImgSrc = "./assets/Images/PerfumesImages/Hermes-Terre-DHermes-Parfum-200ml-.jpeg",
                            Name = "Terre DHermes",
                            OnSale = true,
                            Price = 160.0,
                            ProductType = 0
                        },
                        new
                        {
                            Id = 6,
                            Gender = 1,
                            ImgSrc = "https://www.lovenmour.co.il/images/thumbs/002/0022419_-tester-dior-homme-sport-125ml-edt-_360.jpeg",
                            Name = "DIOR HOMME SPORT",
                            OnSale = false,
                            Price = 190.0,
                            ProductType = 0
                        },
                        new
                        {
                            Id = 7,
                            Gender = 1,
                            ImgSrc = "./assets/Images/PerfumesImages/StrongerArmaniMan.jpg",
                            Name = "STRONGER ARMANI",
                            OnSale = false,
                            Price = 245.0,
                            ProductType = 0
                        },
                        new
                        {
                            Id = 8,
                            Gender = 1,
                            ImgSrc = "./assets/Images/PerfumesImages/HUGO_BOSS_BOTTLED.jpg",
                            Name = "HUGO BOSS BOTTLED",
                            OnSale = false,
                            Price = 150.0,
                            ProductType = 0
                        },
                        new
                        {
                            Id = 9,
                            Gender = 0,
                            ImgSrc = "https://img.zap.co.il/pics/2/2/9/3/41023922c.gif",
                            Name = "Coco Chanel",
                            OnSale = true,
                            Price = 145.0,
                            ProductType = 0
                        },
                        new
                        {
                            Id = 10,
                            Gender = 0,
                            ImgSrc = "./assets/Images/PerfumesImages/ChanelWoman.jpeg",
                            Name = "Gabrielle",
                            OnSale = true,
                            Price = 245.0,
                            ProductType = 0
                        },
                        new
                        {
                            Id = 11,
                            Gender = 0,
                            ImgSrc = "./assets/Images/PerfumesImages/ChanelWoman.jpeg",
                            Name = "Icon Roses",
                            OnSale = true,
                            Price = 200.0,
                            ProductType = 0
                        },
                        new
                        {
                            Id = 12,
                            Gender = 0,
                            ImgSrc = "https://img.zap.co.il/pics/5/2/5/6/51736525c.gif",
                            Name = "Icon Sense",
                            OnSale = true,
                            Price = 120.0,
                            ProductType = 0
                        },
                        new
                        {
                            Id = 13,
                            Gender = 0,
                            ImgSrc = "./assets/Images/PerfumesImages/MonParisWoman.png",
                            Name = "Mon Paris",
                            OnSale = false,
                            Price = 250.0,
                            ProductType = 0
                        },
                        new
                        {
                            Id = 14,
                            Gender = 0,
                            ImgSrc = "./assets/Images/PerfumesImages/Lancom1Woman.jpg",
                            Name = "Lancom",
                            OnSale = false,
                            Price = 180.0,
                            ProductType = 0
                        },
                        new
                        {
                            Id = 15,
                            Gender = 0,
                            ImgSrc = "https://img.zap.co.il/pics/0/6/1/1/42951160c.gif",
                            Name = "ROBERTO CAVALLI",
                            OnSale = false,
                            Price = 200.0,
                            ProductType = 0
                        },
                        new
                        {
                            Id = 16,
                            Gender = 0,
                            ImgSrc = "./assets/Images/PerfumesImages/EuphoriaWoman.jpg",
                            Name = "Euphoria",
                            OnSale = false,
                            Price = 175.0,
                            ProductType = 0
                        },
                        new
                        {
                            Id = 17,
                            Gender = 0,
                            ImgSrc = "https://il.loccitane.com/media/catalog/product/cache/868d7666b4c2dfc365705813a2412c33/2/4/24et050c20.png",
                            Name = "Loccitane",
                            OnSale = false,
                            Price = 100.0,
                            ProductType = 0
                        },
                        new
                        {
                            Id = 18,
                            Gender = 0,
                            ImgSrc = "https://www.kerastase-usa.com/on/demandware.static/-/Sites-kerastase-master-catalog/default/dw855b5ca9/2019/full-size/blond-absolu/kerastase-blond-absolu-masque-ultra-violet-purple-hair-mask.png",
                            Name = "Kerastase",
                            OnSale = false,
                            Price = 45.0,
                            ProductType = 1
                        },
                        new
                        {
                            Id = 19,
                            Gender = 0,
                            ImgSrc = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcR-G7m_QiKgKe4h8dVKMgFSM29-Ns3lNqeoPA&usqp=CAU",
                            Name = "SheaMoisture",
                            OnSale = false,
                            Price = 13.0,
                            ProductType = 1
                        },
                        new
                        {
                            Id = 20,
                            Gender = 0,
                            ImgSrc = "https://media.allure.com/photos/60ae7a8d05e44d9caa4bda2a/1:1/w_1200,h_1200,c_limit/Pantene%20Pro-V%20Soothing%20Recovery%20Mask%20for%20Unruly%20Frizzy%20Hair.jpg",
                            Name = "Pantene",
                            OnSale = false,
                            Price = 15.0,
                            ProductType = 1
                        },
                        new
                        {
                            Id = 21,
                            Gender = 0,
                            ImgSrc = "https://media.allure.com/photos/60ae83569b3b5f2e8e7ae2d0/1:1/w_1300,h_1300,c_limit/Eva%20NYC%20Therapy%20Session%20Hair%20Mask.jpg",
                            Name = "Eva NYC",
                            OnSale = false,
                            Price = 20.0,
                            ProductType = 1
                        },
                        new
                        {
                            Id = 22,
                            Gender = 0,
                            ImgSrc = "./assets/Images/BlowDryConcentrate.png",
                            Name = "Blow Dry Concentrate",
                            OnSale = false,
                            Price = 45.0,
                            ProductType = 1
                        });
                });

            modelBuilder.Entity("PerfumeAppAPI.Data.Entities.ProductSale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("SaleDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ProductsSale");
                });

            modelBuilder.Entity("PerfumeAppAPI.Data.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("AuthLevel")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            AuthLevel = 0,
                            ConcurrencyStamp = "3f2fefd0-e5a0-4bcb-b58a-a90013359a0b",
                            Email = "admin@email.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEFi0KPOImexOTF6rdWUQvrHF+1pXYar7qqSDAf4TE3TwCzauq+ieEFeKOdG0ZjnzeQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "23af14d5-2a31-4d82-bea1-f8abab5e121d",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = "ddc1ddb9-2495-40d6-b278-633bc6ca29c6",
                            AccessFailedCount = 0,
                            AuthLevel = 1,
                            ConcurrencyStamp = "4434e2b8-aa3d-45d4-881b-192cb4c4d87b",
                            Email = "yoni@email.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "YONI@EMAIL.COM",
                            NormalizedUserName = "YONI",
                            PasswordHash = "AQAAAAEAACcQAAAAEDSe1ji8nkC3ajbkPSxJPQ0A/dIL6nADvyU4i75QKeP5yQuiqe2EavH2qJcl+CNVxw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2ef42859-bc95-45d9-aca3-dcaba543ad6a",
                            TwoFactorEnabled = false,
                            UserName = "Yoni"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PerfumeAppAPI.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PerfumeAppAPI.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PerfumeAppAPI.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PerfumeAppAPI.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
